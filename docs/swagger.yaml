basePath: /api
definitions:
  commentEntity.CommentWithReply:
    properties:
      code:
        type: string
      id:
        type: integer
      post_id:
        type: string
      replies:
        items:
          $ref: '#/definitions/replyEntity.Reply'
        type: array
      text:
        type: string
      user_id:
        type: string
    type: object
  likeEntity.Like:
    properties:
      user_id:
        type: string
    required:
    - user_id
    type: object
  postEntity.Post:
    properties:
      caption:
        type: string
      is_comment:
        type: boolean
    required:
    - caption
    type: object
  postEntity.PostShow:
    properties:
      caption:
        type: string
      code:
        type: string
      comments:
        items:
          $ref: '#/definitions/commentEntity.CommentWithReply'
        type: array
      created_at:
        type: string
      id:
        type: integer
      image:
        type: string
      is_comment:
        type: boolean
      likes:
        items:
          $ref: '#/definitions/likeEntity.Like'
        type: array
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  replyEntity.Reply:
    properties:
      text:
        type: string
    required:
    - text
    type: object
  userEntity.AuthRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  userEntity.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  userEntity.UserAccess:
    properties:
      accessToken:
        type: string
      code:
        type: string
      created_at:
        type: string
      email:
        type: string
      emailIsVerified:
        type: boolean
      id:
        type: integer
      isActive:
        type: boolean
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - username
    type: object
host: localhost:8000
info:
  contact: {}
  description: BackEnd TEST API Documentations
  title: WorkLife&Beyond BackEnd TEST API Docs
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Login a user account
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.UserAccess'
      summary: Login a user account
      tags:
      - Authentication
  /auth/register:
    post:
      description: Register a new user account
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.UserAccess'
      summary: Register a user account
      tags:
      - Authentication
  /auth/user:
    get:
      description: Responds with the data of user login.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.UserAccess'
      security:
      - BearerAuth: []
      summary: Get user login data
      tags:
      - Authentication
  /auth/verification-account:
    post:
      description: Verification user account
      parameters:
      - description: Verification token
        in: query
        name: verif
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Verification user account
      tags:
      - Authentication
  /log:
    get:
      description: Log activity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Log activity
      tags:
      - Log
  /post:
    get:
      description: Get all post
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postEntity.PostShow'
      security:
      - BearerAuth: []
      summary: Get all post
      tags:
      - Post
  /post/comment:
    post:
      description: Comment a post
      parameters:
      - description: Post Code
        in: query
        name: post_id
        required: true
        type: string
      - description: Comment
        in: query
        name: comment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Comment a post
      tags:
      - Comment
  /post/comment/reply:
    post:
      description: Reply a comment
      parameters:
      - description: Comment Code
        in: query
        name: comment_id
        required: true
        type: string
      - description: Reply
        in: query
        name: reply
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reply a comment
      tags:
      - Reply
  /post/create:
    post:
      description: Create a new post
      parameters:
      - description: Post Caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Post Enable/Disable
        in: formData
        name: is_comment
        required: true
        type: boolean
      - description: Post Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postEntity.Post'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - Post
  /post/delete:
    delete:
      description: Soft Delete an existing post
      parameters:
      - description: Existing Post Code
        in: formData
        name: code
        required: true
        type: string
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Soft Delete an existing post
      tags:
      - Post
  /post/like:
    post:
      description: Like a post
      parameters:
      - description: Post Code
        in: query
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Like a post
      tags:
      - Like
  /post/show:
    get:
      description: Show a specific post
      parameters:
      - description: Post Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postEntity.PostShow'
      security:
      - BearerAuth: []
      summary: Show a specific post
      tags:
      - Post
  /post/unlike:
    delete:
      description: Unlike a post
      parameters:
      - description: Post Code
        in: query
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Unlike a post
      tags:
      - Like
  /post/update:
    put:
      description: Update an existing post
      parameters:
      - description: Existing Post Code
        in: formData
        name: code
        required: true
        type: string
      - description: Post Caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Post Enable/Disable
        in: formData
        name: is_comment
        required: true
        type: boolean
      - description: Post Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postEntity.Post'
      security:
      - BearerAuth: []
      summary: Update an existing post
      tags:
      - Post
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
